import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Skeleton } from "@/components/ui/skeleton";
import { BookmarkIcon } from "lucide-react";
import ExperienceCard from "../components/ExperienceCard";

export default function Saved() {
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: savedExperiences, isLoading: savedLoading } = useQuery({
    queryKey: ['savedExperiences'],
    queryFn: () => base44.entities.SavedExperience.filter({ user_email: user.email }),
    enabled: !!user,
    initialData: [],
  });

  const { data: experiences, isLoading: experiencesLoading } = useQuery({
    queryKey: ['savedExperienceDetails'],
    queryFn: async () => {
      const experienceIds = savedExperiences.map(s => s.experience_id);
      if (experienceIds.length === 0) return [];
      const allExperiences = await base44.entities.HealthExperience.list();
      return allExperiences.filter(exp => experienceIds.includes(exp.id));
    },
    enabled: savedExperiences.length > 0,
    initialData: [],
  });

  const unsaveMutation = useMutation({
    mutationFn: (savedId) => base44.entities.SavedExperience.delete(savedId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['savedExperiences'] });
      queryClient.invalidateQueries({ queryKey: ['savedExperienceDetails'] });
    },
  });

  const handleUnsave = (experienceId) => {
    const saved = savedExperiences.find(
      s => s.experience_id === experienceId && s.user_email === user?.email
    );
    if (saved) {
      unsaveMutation.mutate(saved.id);
    }
  };

  const isLoading = savedLoading || experiencesLoading;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-cyan-50/30">
      <div className="max-w-6xl mx-auto px-4 md:px-8 py-8 md:py-12">
        <div className="mb-10">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-800 mb-3 tracking-tight">
            Saved Experiences
          </h1>
          <p className="text-lg text-slate-600">
            Health experiences you've bookmarked for later reference
          </p>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            {Array(3).fill(0).map((_, i) => (
              <div key={i} className="bg-white rounded-2xl p-6 border border-slate-200">
                <Skeleton className="h-6 w-32 mb-4" />
                <Skeleton className="h-8 w-3/4 mb-3" />
                <Skeleton className="h-20 w-full" />
              </div>
            ))}
          </div>
        ) : experiences.length === 0 ? (
          <div className="text-center py-20">
            <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <BookmarkIcon className="w-10 h-10 text-slate-400" />
            </div>
            <h3 className="text-2xl font-bold text-slate-700 mb-2">No saved experiences yet</h3>
            <p className="text-slate-500">Bookmark experiences you find helpful to reference later</p>
          </div>
        ) : (
          <div className="grid gap-6">
            {experiences.map(exp => (
              <ExperienceCard
                key={exp.id}
                experience={exp}
                onSave={() => handleUnsave(exp.id)}
                isSaved={true}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}