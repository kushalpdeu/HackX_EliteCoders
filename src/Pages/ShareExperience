import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Send, Shield, X } from "lucide-react";

const categories = [
  { value: "respiratory", label: "Respiratory" },
  { value: "digestive", label: "Digestive" },
  { value: "musculoskeletal", label: "Muscle & Joints" },
  { value: "skin", label: "Skin" },
  { value: "mental_health", label: "Mental Health" },
  { value: "sleep", label: "Sleep" },
  { value: "headaches", label: "Headaches" },
  { value: "allergies", label: "Allergies" },
  { value: "nutrition", label: "Nutrition" },
  { value: "fitness", label: "Fitness" },
  { value: "womens_health", label: "Women's Health" },
  { value: "mens_health", label: "Men's Health" },
  { value: "general", label: "General" }
];

export default function ShareExperience() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    category: "",
    severity: "mild",
    duration: "",
    what_helped: "",
    tags: []
  });
  const [currentTag, setCurrentTag] = useState("");

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const createMutation = useMutation({
    mutationFn: async (data) => {
      await base44.entities.HealthExperience.create({
        ...data,
        anonymous_author: user.anonymous_username || `User${user.id.slice(0, 6)}`,
      });
    },
    onSuccess: () => {
      navigate(createPageUrl("Feed"));
    },
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    createMutation.mutate(formData);
  };

  const addTag = () => {
    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, currentTag.trim()]
      }));
      setCurrentTag("");
    }
  };

  const removeTag = (tagToRemove) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-cyan-50/30">
      <div className="max-w-3xl mx-auto px-4 md:px-8 py-8 md:py-12">
        <div className="mb-10">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-800 mb-3 tracking-tight">
            Share Your Experience
          </h1>
          <p className="text-lg text-slate-600">
            Help others by sharing your health journey anonymously
          </p>
        </div>

        <div className="mb-6 p-4 bg-gradient-to-r from-teal-50 to-cyan-50 rounded-2xl border border-teal-100">
          <div className="flex items-start gap-3">
            <div className="w-8 h-8 bg-teal-500 rounded-full flex items-center justify-center flex-shrink-0">
              <Shield className="w-4 h-4 text-white" />
            </div>
            <div>
              <h4 className="font-semibold text-sm text-slate-800 mb-1">Your Privacy is Protected</h4>
              <p className="text-sm text-slate-600 leading-relaxed">
                Your post will be shared anonymously. No personal information will be visible to other users.
              </p>
            </div>
          </div>
        </div>

        <Card className="border-slate-200 shadow-xl bg-white/80 backdrop-blur-sm">
          <CardHeader className="border-b border-slate-100 pb-6">
            <CardTitle className="text-2xl font-bold text-slate-800">Experience Details</CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="title" className="text-sm font-semibold text-slate-700">
                  Title *
                </Label>
                <Input
                  id="title"
                  required
                  placeholder="Brief summary of your experience"
                  value={formData.title}
                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                  className="h-12 border-slate-200 rounded-xl"
                />
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="category" className="text-sm font-semibold text-slate-700">
                    Category *
                  </Label>
                  <Select
                    value={formData.category}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}
                  >
                    <SelectTrigger className="h-12 border-slate-200 rounded-xl">
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map(cat => (
                        <SelectItem key={cat.value} value={cat.value}>
                          {cat.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="severity" className="text-sm font-semibold text-slate-700">
                    Severity
                  </Label>
                  <Select
                    value={formData.severity}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, severity: value }))}
                  >
                    <SelectTrigger className="h-12 border-slate-200 rounded-xl">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="mild">Mild</SelectItem>
                      <SelectItem value="moderate">Moderate</SelectItem>
                      <SelectItem value="concerning">Concerning</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="duration" className="text-sm font-semibold text-slate-700">
                  Duration
                </Label>
                <Input
                  id="duration"
                  placeholder="e.g., '3 days', '2 weeks', 'ongoing'"
                  value={formData.duration}
                  onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}
                  className="h-12 border-slate-200 rounded-xl"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description" className="text-sm font-semibold text-slate-700">
                  Description *
                </Label>
                <Textarea
                  id="description"
                  required
                  placeholder="Describe your experience in detail. What symptoms did you have? When did it start?"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  className="min-h-32 border-slate-200 rounded-xl resize-none"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="what_helped" className="text-sm font-semibold text-slate-700">
                  What Helped?
                </Label>
                <Textarea
                  id="what_helped"
                  placeholder="Share any remedies, treatments, or lifestyle changes that helped"
                  value={formData.what_helped}
                  onChange={(e) => setFormData(prev => ({ ...prev, what_helped: e.target.value }))}
                  className="min-h-24 border-slate-200 rounded-xl resize-none"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="tags" className="text-sm font-semibold text-slate-700">
                  Tags (Optional)
                </Label>
                <div className="flex gap-2">
                  <Input
                    id="tags"
                    placeholder="Add tags for better searchability"
                    value={currentTag}
                    onChange={(e) => setCurrentTag(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                    className="h-12 border-slate-200 rounded-xl"
                  />
                  <Button
                    type="button"
                    onClick={addTag}
                    variant="outline"
                    className="h-12 px-6 rounded-xl"
                  >
                    Add
                  </Button>
                </div>
                {formData.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-3">
                    {formData.tags.map(tag => (
                      <Badge
                        key={tag}
                        variant="secondary"
                        className="px-3 py-1.5 bg-cyan-100 text-cyan-700 border-cyan-200"
                      >
                        {tag}
                        <button
                          type="button"
                          onClick={() => removeTag(tag)}
                          className="ml-2 hover:text-cyan-900"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              <div className="flex gap-4 pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate(createPageUrl("Feed"))}
                  className="flex-1 h-12 rounded-xl"
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={createMutation.isPending}
                  className="flex-1 h-12 bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white rounded-xl shadow-lg shadow-cyan-500/25"
                >
                  <Send className="w-4 h-4 mr-2" />
                  {createMutation.isPending ? 'Sharing...' : 'Share Experience'}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}