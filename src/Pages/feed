import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Filter } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import ExperienceCard from "../components/ExperienceCard";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const categories = [
  { value: "all", label: "All Categories" },
  { value: "respiratory", label: "Respiratory" },
  { value: "digestive", label: "Digestive" },
  { value: "musculoskeletal", label: "Muscle & Joints" },
  { value: "skin", label: "Skin" },
  { value: "mental_health", label: "Mental Health" },
  { value: "sleep", label: "Sleep" },
  { value: "headaches", label: "Headaches" },
  { value: "allergies", label: "Allergies" },
  { value: "nutrition", label: "Nutrition" },
  { value: "fitness", label: "Fitness" },
  { value: "womens_health", label: "Women's Health" },
  { value: "mens_health", label: "Men's Health" },
  { value: "general", label: "General" }
];

export default function Feed() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: experiences, isLoading } = useQuery({
    queryKey: ['experiences'],
    queryFn: () => base44.entities.HealthExperience.list("-created_date"),
    initialData: [],
  });

  const { data: savedExperiences } = useQuery({
    queryKey: ['savedExperiences'],
    queryFn: () => base44.entities.SavedExperience.list(),
    initialData: [],
  });

  const saveMutation = useMutation({
    mutationFn: (experienceId) => 
      base44.entities.SavedExperience.create({
        experience_id: experienceId,
        user_email: user.email
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['savedExperiences'] });
    },
  });

  const unsaveMutation = useMutation({
    mutationFn: (savedId) => base44.entities.SavedExperience.delete(savedId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['savedExperiences'] });
    },
  });

  const handleSaveToggle = (experienceId) => {
    const saved = savedExperiences.find(
      s => s.experience_id === experienceId && s.user_email === user?.email
    );
    if (saved) {
      unsaveMutation.mutate(saved.id);
    } else {
      saveMutation.mutate(experienceId);
    }
  };

  const filteredExperiences = experiences.filter(exp => {
    const matchesSearch = exp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         exp.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === "all" || exp.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-cyan-50/30">
      <div className="max-w-6xl mx-auto px-4 md:px-8 py-8 md:py-12">
        <div className="mb-10">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-800 mb-3 tracking-tight">
            Community Feed
          </h1>
          <p className="text-lg text-slate-600">
            Browse shared health experiences from our anonymous community
          </p>
        </div>

        <div className="mb-8 space-y-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
              <Input
                placeholder="Search experiences..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-12 h-12 bg-white border-slate-200 rounded-xl shadow-sm focus:shadow-md transition-shadow"
              />
            </div>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-full md:w-64 h-12 bg-white border-slate-200 rounded-xl shadow-sm">
                <Filter className="w-4 h-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map(cat => (
                  <SelectItem key={cat.value} value={cat.value}>
                    {cat.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="grid gap-6">
          {isLoading ? (
            Array(3).fill(0).map((_, i) => (
              <div key={i} className="bg-white rounded-2xl p-6 border border-slate-200">
                <Skeleton className="h-6 w-32 mb-4" />
                <Skeleton className="h-8 w-3/4 mb-3" />
                <Skeleton className="h-20 w-full mb-4" />
                <div className="flex gap-4">
                  <Skeleton className="h-4 w-16" />
                  <Skeleton className="h-4 w-16" />
                </div>
              </div>
            ))
          ) : filteredExperiences.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-slate-400" />
              </div>
              <h3 className="text-xl font-semibold text-slate-700 mb-2">No experiences found</h3>
              <p className="text-slate-500">Try adjusting your search or filters</p>
            </div>
          ) : (
            filteredExperiences.map(exp => (
              <ExperienceCard
                key={exp.id}
                experience={exp}
                onSave={() => handleSaveToggle(exp.id)}
                isSaved={savedExperiences.some(
                  s => s.experience_id === exp.id && s.user_email === user?.email
                )}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
}