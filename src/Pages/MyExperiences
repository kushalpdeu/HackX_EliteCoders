
import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Trash2, Heart } from "lucide-react";
import { createPageUrl } from "@/utils";
import ExperienceCard from "../components/ExperienceCard";

export default function MyExperiences() {
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: myExperiences, isLoading } = useQuery({
    queryKey: ['myExperiences', user?.email],
    queryFn: () => base44.entities.HealthExperience.filter(
      { created_by: user.email },
      "-created_date"
    ),
    enabled: !!user,
    initialData: [],
  });

  const { data: savedExperiences } = useQuery({
    queryKey: ['savedExperiences'],
    queryFn: () => base44.entities.SavedExperience.list(),
    initialData: [],
  });

  const deleteMutation = useMutation({
    mutationFn: (id) => base44.entities.HealthExperience.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['myExperiences'] });
    },
  });

  const saveMutation = useMutation({
    mutationFn: (experienceId) => 
      base44.entities.SavedExperience.create({
        experience_id: experienceId,
        user_email: user.email
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['savedExperiences'] });
    },
  });

  const unsaveMutation = useMutation({
    mutationFn: (savedId) => base44.entities.SavedExperience.delete(savedId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['savedExperiences'] });
    },
  });

  const handleSaveToggle = (experienceId) => {
    const saved = savedExperiences.find(
      s => s.experience_id === experienceId && s.user_email === user?.email
    );
    if (saved) {
      unsaveMutation.mutate(saved.id);
    } else {
      saveMutation.mutate(experienceId);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-cyan-50/30">
      <div className="max-w-6xl mx-auto px-4 md:px-8 py-8 md:py-12">
        <div className="mb-10">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-800 mb-3 tracking-tight">
            My Experiences
          </h1>
          <p className="text-lg text-slate-600">
            Manage the health experiences you've shared with the community
          </p>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            {Array(3).fill(0).map((_, i) => (
              <div key={i} className="bg-white rounded-2xl p-6 border border-slate-200">
                <Skeleton className="h-6 w-32 mb-4" />
                <Skeleton className="h-8 w-3/4 mb-3" />
                <Skeleton className="h-20 w-full" />
              </div>
            ))}
          </div>
        ) : myExperiences.length === 0 ? (
          <div className="text-center py-20">
            <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <Heart className="w-10 h-10 text-slate-400" />
            </div>
            <h3 className="text-2xl font-bold text-slate-700 mb-2">No experiences yet</h3>
            <p className="text-slate-500 mb-6">Share your first health experience with the community</p>
            <Button
              onClick={() => window.location.href = createPageUrl("ShareExperience")}
              className="bg-gradient-to-r from-cyan-500 to-teal-500 hover:from-cyan-600 hover:to-teal-600 text-white rounded-xl shadow-lg shadow-cyan-500/25"
            >
              Share Experience
            </Button>
          </div>
        ) : (
          <div className="grid gap-6">
            {myExperiences.map(exp => (
              <div key={exp.id} className="relative group">
                <ExperienceCard
                  experience={exp}
                  onSave={() => handleSaveToggle(exp.id)}
                  isSaved={savedExperiences.some(
                    s => s.experience_id === exp.id && s.user_email === user?.email
                  )}
                />
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => {
                    if (confirm("Are you sure you want to delete this experience?")) {
                      deleteMutation.mutate(exp.id);
                    }
                  }}
                  className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity rounded-xl shadow-lg"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete
                </Button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
